[build-system]
requires = ["setuptools>=42", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "easyner"
version = "0.1.0"
description = "Named Entity Recognition for Medical Text"
readme = "README.md"
requires-python = ">=3.9"
license = {text = "MIT"}
authors = [
    {name = "Aits Labs. Mainly Carl Ollvik Aasa adapted from work by Rafsan Ahmed, Sonja Aits, Salma Kazemi Rashed"}
]
dependencies = [
    "numpy>=1.20.0",
    "pandas>=1.3.0",
    "matplotlib>=3.4.0",
    "seaborn>=0.11.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "black>=22.0.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.0.0",
]

[tool.setuptools]
packages = ["easyner"]

[tool.pytest.ini_options]
testpaths = ["tests/*"]
python_functions = ["test_*", "_test*"]
norecursedirs = [".svn", "_build", "/tmp*", "/temp", "/venv*", "**/.tox", "**/.eggs", "**/.git", "**/__pycache__", "**/build", "**/dist", "easyner/*"]
log_level = "DEBUG"
addopts = [
    "--durations=10",
    "--nf",
]

# lf = last-failed
# nf = new-first (runs the last modified test files first)
# --sw, --stepwise Exit on test failure and continue from last failing test next time

[tool.black]
line-length = 88
target-version = ['py39']
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88


[tool.mypy]
python_version = "3.9"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
follow_imports = "skip"
exclude = [
    ".venv",
    "venv",
    "easyner_env",
    "__pycache__",
    "build",
    "dist",
    ".*\\.egg-info",
    ".git",
    "site-packages",
    "temp",
    "experiment_scripts",

# Note that the TOML equivalent differs slightly. It can be either a single string (including a multi-line string) – which is treated as a single regular expression – or an array of such strings.
#
# Array of strings:
#
# [tool.mypy]
# exclude = [
#    "^one\\.py$",  # TOML's double-quoted strings require escaping backslashes
#    'two\.pyi$',  # but TOML's single-quoted strings do not
#    '^three\.',
#]
#
#A single, multi-line string:
#
# [tool.mypy]
# exclude = '''(?x)(
#    ^one\.py$    # files named "one.py"
#    | two\.pyi$  # or files ending with "two.pyi"
#    | ^three\.   # or files starting with "three."
# )'''  # TOML's single-quoted strings do not require escaping backslashes
]

# These are ignored as scripts are being migrated to the new easyner package.
[[tool.mypy.overrides]]
module = "scripts.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false

# Development time for creating as rigerousy typed tests is at this stage
# deemed to be too high. In future we will migrate to a more rigorous typing
[[tool.mypy.overrides]]
module = "tests.*"
disallow_untyped_defs = false
disallow_incomplete_defs = false


[[tool.mypy.overrides]]
module = [
    "numpy.*",
    "pandas.*",
]
follow_imports = "silent"




[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    # Exclude the scripts directory which is migrated to the new easyner package.
    "scripts",
]
line-length = 88
indent-width = 4

target-version = "py39"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.

select = [
    "E",
    # Enable all of the pycodestyle codes.
    # This includes all of the `E` codes, as well as `W` codes that are not
    # enabled by default.
    "F",
    # Enable all of the pyflakes codes.
    # This includes all of the `F` codes, as well as `W` codes that are not
    # enabled by default.
    "D",
    # Augment the convention by requiring an imperative mood for all docstrings.
    "D401",
    "B",
    "I",
    # Enable all of the isort codes.
    "N",
    # Enable pep8-naming (N),
    # flake8-use-pathlib (PTH),
    # "PTH",
    # Perflint (PERF)
    "PERF",
    # pyupgrade (UP)
    "UP",
    # A checker for Flake8 that helps format nice error messages
    "EM",
    # McCabe complexity checker
    "C90",
    # flake8-pytest-style (PT) A flake8 plugin checking common style issues or inconsistencies with pytest-based tests
    "PT",
    "COM", # flake8-commas (COM)
    # flake8-annotations is a plugin for Flake8 that detects the absence of PEP 3107-style function annotations
    "ANN",
]

ignore = [
    # Relax the convention by _not_ requiring documentation for every function parameter.
    "D417",
    # Relax convention by not requiring documentation
    "D415", # This duplicate "First line should end with a period RuffD400", cluttering the output
]


# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = ["F401"] # Don't automatically fix unused imports as this can provide info on unexected unused imports
# that may be useful for debugging.

extend-safe-fixes = ["UP006", "EM102", "ANN201", "D400", "EM101"]
# UP006 use built in types, this is unsafe if using pydantic which relies on types being imported from types
# EM102 extract strings in error messages so that the message is interpreted when sent to traceback and logging
# Python includes the raise in the default traceback (and formatters like Rich and IPython do too).
# D400 First line should end with a period
# EM101 Exception must not use a string literal, assign to variable firstRuffEM101

[tool.ruff.lint.mccabe]
# Flag errors (`C901`) whenever the complexity level exceeds 8.
max-complexity = 8

[tool.ruff.lint.flake8-errmsg]
max-string-length = 20
